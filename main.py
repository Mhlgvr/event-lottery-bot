import asyncio
from collections import defaultdict
import random
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import os

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = os.getenv('ADMIN_IDS')
CHANNEL_IDS = os.getenv('CHANNEL_IDS')

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

authorized_users = set()
user_ids = defaultdict()


async def check_subscriptions(user_id: int) -> bool:
    for chat_id in CHANNEL_IDS:
        user_channel_status = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        if user_channel_status.status != 'member':
            return False
    return True


check_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ö–∞–Ω–∞–ª 1', url='https://t.me/channel1')],
    [InlineKeyboardButton(text='–ö–∞–Ω–∞–ª 2', url='https://t.me/channel2')],
    [InlineKeyboardButton(text='–ö–∞–Ω–∞–ª 3', url='https://t.me/channel3')],
    [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data='check_sub')]
])

member_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–ö–∞–Ω–∞–ª 1', url='https://t.me/channel1')],
    [InlineKeyboardButton(text='–ö–∞–Ω–∞–ª 2', url='https://t.me/channel2')],
    [InlineKeyboardButton(text='–ö–∞–Ω–∞–ª 3', url='https://t.me/channel3')]
])

admin_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è', callback_data='choose_winner')],
    [InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='view_users')]
])


@dp.message(CommandStart())
async def start(message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!", reply_markup=admin_kb)
    elif message.from_user.username in authorized_users:
        await message.answer("–¢—ã —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! –ñ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)", reply_markup=member_kb)
    else:
        text = "–ü—Ä–∏–≤–µ—Ç! üëã –ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ 3 –∫–∞–Ω–∞–ª–∞:"
        await message.answer(text, reply_markup=check_kb)


@dp.callback_query(F.data == "check_sub")
async def check_sub(callback):
    user = callback.from_user
    ok = await check_subscriptions(user.id)

    if ok:
        authorized_users.add(user.username)
        user_ids[user.username] = user.id
        await callback.message.edit_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ üéâ"
        )
    else:
        await callback.answer("–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–µ –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã (", show_alert=True, reply_markup=check_kb)


@dp.callback_query(F.data == "choose_winner")
async def choose_winner(callback):
    if callback.from_user.id not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    if not authorized_users:
        return await callback.answer("–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç!", show_alert=True, reply_markup=admin_kb)

    winner = random.choice(list(authorized_users))
    winner_id = user_ids[winner]
    await callback.message.answer(f"üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @{winner}")
    await bot.send_message(winner_id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!")


@dp.callback_query(F.data == "view_users")
async def view_users(callback):
    if callback.from_user.id not in ADMIN_IDS:
        return await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)

    if not authorized_users:
        await callback.message.answer("üìù –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—É—Å—Ç!", reply_markup=admin_kb)
        return

    users_list = list(authorized_users)
    total_count = len(users_list)
    
    message_text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–≤—Å–µ–≥–æ: {total_count}):\n\n"
    message_text += "\n".join(f"‚Ä¢ @{user}" for user in users_list)
    
    await callback.message.answer(message_text)


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
